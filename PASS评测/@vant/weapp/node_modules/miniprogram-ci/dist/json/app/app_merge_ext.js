"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.getAppJSON=void 0;const path=require("path"),cache_1=require("../../utils/cache"),lodash_1=require("lodash"),app_1=require("./app"),ext_1=require("./ext"),_app_1=require("./_app"),getProjectConfigJSON=require("../projectconfig"),common_1=require("../../utils/common"),locales=require("../../utils/locales/locales"),theme_1=require("../theme");async function getAppJSON(e,t=!0){const o=cache_1.cacheManager.get(e,cache_1.CACHE_KEY.COMPILED_APP_JSON);if(o&&t)return lodash_1.cloneDeep(o);const p=await getProjectConfigJSON(e,t),{miniprogramRoot:a=""}=p,c=await app_1.getAppJSON(e,t),r=await ext_1.getExtJSON(e,t);if(r&&(_app_1.mergeExtJSON(c,r),r.extEnable))try{const t=await theme_1.getThemeLocation(e);let o={};t&&(o=await theme_1.checkThemeJSON(e,{themeLocation:t}));const p=theme_1.mergeThemeJSONToAppJSON(o,c);app_1.checkAppJSON({project:e,miniprogramRoot:a,inputJSON:p.appJSONLight,filePath:path.posix.join(a,"app.json")}),app_1.checkAppJSON({project:e,miniprogramRoot:a,inputJSON:p.appJSONDark,filePath:path.posix.join(a,"app.json")})}catch(e){common_1.throwError({msg:e.message,code:e.code,filePath:`app.json ${locales.config.OR} ext.json`})}return cache_1.cacheManager.set(e,cache_1.CACHE_KEY.COMPILED_APP_JSON,c),lodash_1.cloneDeep(c)}exports.getAppJSON=getAppJSON;