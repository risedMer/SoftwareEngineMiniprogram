"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.getAllPluginSignatures=exports.isPathValid=exports.getAllPluginsWithPath=exports.friendlyPathMake=exports.trailing=void 0;const path=require("path"),getGameJSON=require("./game"),fse=require("fs-extra"),tools_1=require("../utils/tools"),log=require("../utils/log");async function getAllPluginsWithPath(t){const e=await getGameJSON(t),i=[],r=(t,e="")=>{if(t.plugins)for(const r in t.plugins){if(!t.plugins.hasOwnProperty(r))continue;const a=t.plugins[r];a&&"string"==typeof a.path&&i.push({alias:r,version:a.version||"",provider:a.provider||"",path:a.path,friendlyPath:exports.friendlyPathMake(e,a.path)})}};r(e,"");const a=e.subPackages||e.subpackages;if(Array.isArray(a))for(const t of a)t&&"string"==typeof t.root&&r(t,t.root);return i}function isPathValid(t,e){if(e=e.replace(/\\/g,"/"),t=t.replace(/\\/g,"/"),e.includes("../")||e.endsWith("/.."))return!1;const i=tools_1.normalizePath(path.join(t,e)),r=tools_1.normalizePath(t);return!!i.startsWith(r)}async function getAllPluginSignatures(t){const e=await getAllPluginsWithPath(t),i=[];let r=t.miniprogramRoot?path.join(t.projectPath,t.miniprogramRoot):t.projectPath;r=tools_1.normalizePath(r),r=r.endsWith("/")?r:r+"/";for(const t of e)try{const e=path.join(r,t.friendlyPath);let a=await fse.pathExists(e);if(!a)continue;const n=await fse.stat(e);let o=e;n.isDirectory()||(o=path.dirname(e));const s=path.join(o,"signature.json");if(a=await fse.pathExists(s),!a)continue;const l=await fse.readFile(s,"utf8");let p=null;try{p=JSON.parse(l)}catch(t){log.error(t);continue}if(!p||!Array.isArray(p.signature))continue;const u=[];for(let t=0;t<p.signature.length;t++){const e=p.signature[t];if(!e)continue;if("string"!=typeof e.path||"string"!=typeof e.md5)continue;if(!isPathValid(o,e.path))continue;const i=path.join(o,e.path);u.push({fullPath:i,md5:e.md5})}i.push({provider:t.provider,fullPath:e,signature:u})}catch(t){log.error(t);continue}return i}exports.trailing=(t,e)=>t.endsWith(e)?t:t+e,exports.friendlyPathMake=(t,e)=>path.normalize(path.join(t,e.replace(/\\/g,"/")).replace(/^\/+/,"")),exports.getAllPluginsWithPath=getAllPluginsWithPath,exports.isPathValid=isPathValid,exports.getAllPluginSignatures=getAllPluginSignatures;