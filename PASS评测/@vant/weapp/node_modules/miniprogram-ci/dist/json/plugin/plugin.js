"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.getGameLocalPluginJSON=exports.getDevPluginJSON=exports.checkComponentPath=void 0;const path=require("path"),lodash_1=require("lodash"),getProjectConfigJSON=require("../projectconfig"),locales=require("../../utils/locales/locales"),common_1=require("../common"),config_1=require("../../config"),validateType=require("../../validate/pluginjson"),{schemaValidate:schemaValidate,NEW_CHECK_JSON_WAY:NEW_CHECK_JSON_WAY}=require("../../validate/schemaValidate"),tools_1=require("../../utils/tools"),cache_1=require("../../utils/cache"),common_2=require("../../utils/common"),common_3=require("../common");async function checkComponentPath(o,e){const{project:t,root:c,filePath:n}=o;void 0!==e.usingComponents&&await common_3.checkComponentPath({project:t,root:c,relativePath:path.posix.relative(c,n),inputJSON:e})}function checkPublicComponentsAndPages(o,e){const{project:t,root:c,filePath:n}=o,{publicComponents:i,pages:a}=e,r={};if(i){const o=[];for(const a in i){const i=e.publicComponents[a];common_2.checkPath({value:i,tips:`["publicComponents"]["${a}"]`,filePath:n,code:config_1.PLUGIN_JSON_CONTENT_ERR});let s=t.stat(c,i+".wxml");s&&!s.isDirectory||o.push(locales.config.CORRESPONDING_FILE_NOT_FOUND.format(`["publicComponents"]["${i}"]`,i+".wxml")),s=t.stat(c,i+".js"),s&&!s.isDirectory||o.push(locales.config.CORRESPONDING_FILE_NOT_FOUND.format(`["publicComponents"]["${i}"]`,i+".js")),s=t.stat(c,i+".json"),s&&!s.isDirectory||o.push(locales.config.CORRESPONDING_FILE_NOT_FOUND.format(`["publicComponents"]["${i}"]`,i+".json")),r[a]=!0}o.length>0&&common_2.throwError({msg:o.join("\n"),code:config_1.PLUGIN_JSON_CONTENT_ERR,filePath:n})}if(a){const o=[];for(const e in a){const i=a[e];common_2.checkPath({value:i,tips:`["pages"]["${e}"]`,filePath:n,code:config_1.PLUGIN_JSON_CONTENT_ERR});let s=t.stat(c,i+".wxml");s&&!s.isDirectory||o.push(locales.config.CORRESPONDING_FILE_NOT_FOUND.format(`["pages"]["${i}"]`,i+".wxml")),s=t.stat(c,i+".js"),s&&!s.isDirectory||o.push(locales.config.CORRESPONDING_FILE_NOT_FOUND.format(`["pages"]["${i}"]`,i+".js")),s=t.stat(c,i+".json"),s&&!s.isDirectory||o.push(locales.config.CORRESPONDING_FILE_NOT_FOUND.format(`["pages"]["${i}"]`,i+".json")),r[e]&&o.push(locales.config.SAME_KEY_PAGE_PUBLICCOMPONENTS.format(`"${e}"`)),r[e]=!0}o.length>0&&common_2.throwError({msg:o.join("\n"),code:config_1.PLUGIN_JSON_CONTENT_ERR,filePath:n})}}function checkMain(o,e){const{project:t,root:c,filePath:n}=o,{main:i}=e;if(void 0===i)return;""===i&&common_2.throwError({msg:locales.config.SHOULD_NOT_BE_EMPTY.format('["main"]'),code:config_1.PLUGIN_JSON_CONTENT_ERR,filePath:n}),common_2.checkPath({value:i,tips:'["main"]',filePath:n,code:config_1.PLUGIN_JSON_CONTENT_ERR});const a=t.stat(c,i);a&&!a.isDirectory||common_2.throwError({msg:locales.config.CORRESPONDING_FILE_NOT_FOUND.format('["main"]',i),code:config_1.PLUGIN_JSON_CONTENT_ERR,filePath:n})}function isKindOfGamePlugin(o){return o.type===config_1.COMPILE_TYPE.miniGamePlugin}async function checkPluginJSON(o){const{root:e="",project:t}=o,c=path.posix.join(e,"plugin.json");t.stat(e,"plugin.json")||common_2.throwError({msg:locales.config.FILE_NOT_FOUND.format(c),code:config_1.PLUGIN_JSON_FILE_NOT_FOUND,filePath:c});const n=await t.getFile(e,"plugin.json"),i=common_1.checkJSONFormat(common_2.checkUTF8(n,c),c);if(NEW_CHECK_JSON_WAY){const o=schemaValidate("plugin",i);if(o.error.length){const e=o.error.map(o=>"type"===o.errorType||"enum"===o.errorType||"anyOf"===o.errorType?locales.config.JSON_CONTENT_SHOULD_BE.format([o.errorProperty,o.correctType]):locales.config.SHOULD_NOT_BE_EMPTY.format([o.requireProperty])).join("\n");common_2.throwError({msg:"pluginJSON$"+e,code:config_1.PLUGIN_JSON_CONTENT_ERR,filePath:c})}}else try{validateType.check(i)}catch(o){common_2.throwError({msg:"pluginJSON"+o.message,code:config_1.PLUGIN_JSON_CONTENT_ERR,filePath:c})}return void 0!==i.themeLocation&&common_2.checkPath({value:i.themeLocation,tips:'["themeLocation"]',filePath:c}),isKindOfGamePlugin(t)||(checkPublicComponentsAndPages(o,i),await checkComponentPath(o,i)),checkMain(o,i),i}async function getDevPluginJSON(o,e=!0,t=""){const c=cache_1.cacheManager.get(o,cache_1.CACHE_KEY.PLUGIN_JSON);if(c&&e)return lodash_1.cloneDeep(c);const n=await getProjectConfigJSON(o),{pluginRoot:i=""}=n;let a=i;o.type===config_1.COMPILE_TYPE.miniGame&&t&&(a=t),t||i||common_2.throwError({msg:locales.config.NOT_FOUND.format('["pluginRoot"]'),filePath:"project.config.json",code:config_1.JSON_CONTENT_ERR});const r=await checkPluginJSON({project:o,filePath:path.posix.join(a,"plugin.json"),root:a});return cache_1.cacheManager.set(o,cache_1.CACHE_KEY.PLUGIN_JSON,r),lodash_1.cloneDeep(r)}exports.checkComponentPath=checkComponentPath,exports.getDevPluginJSON=getDevPluginJSON,exports.getGameLocalPluginJSON=async(o,e)=>{const t=await getProjectConfigJSON(o),{miniprogramRoot:c}=t;if(!e)return{};const n=tools_1.normalizePath(path.posix.join(c||"",e));return checkPluginJSON({project:o,filePath:path.posix.join(n,"plugin.json"),root:n})};